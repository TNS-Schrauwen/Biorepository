#This step is only done once for the sample

#!/bin/bash
#$ -l h_rt=96:00:00
#$ -l h_vmem=30G
#$ -N Build_Reference_Genome_STAR
#$ -o /path/to/Build_STAR_Index-$JOB_ID.out
#$ -e /path/to/Build_STAR_Index-$JOB_ID.err
#$ -j y
#$ -q queue

#____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

# Export your Miniconda path
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
# Load modules
module load STAR/2.7.11a
module load SAMTOOLS/1.17


# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

# Path to the soft masked ref genome for alignment from Ensemble then run:
Genome_FASTA="/path/to/fasta_file.fa"

# Path to the annotation GTF file:
Annotation_GTF="/path/to/GTF_file.gtf"

# Path to the reference genome directory:
Reference="/path/to/references"

#____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

# Get the current timestamp:
start_timestamp=$(date "+%Y-%m-%d %H:%M:%S")

# Print the timestamp to stdout:
echo "                                "
echo "Job started at: $start_timestamp"
echo "                                "

#____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
#create a directory 
STAR_dir="${Reference}/STAR_Reference"
if [ ! -d "$STAR_dir" ]; then
        echo "Creating directory: $STAR_dir"
        mkdir -pv "$STAR_dir"
    fi
    
STAR \
    --runThreadN 20 \
    --runMode genomeGenerate \
    --genomeDir "${STAR_dir}" \
    --genomeFastaFiles "$Genome_FASTA" \
    --sjdbGTFfile "${Annotation_GTF}" \
    --sjdbOverhang 100 \
    --limitSjdbInsertNsj 10000000 

#____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

# Memory Used:
echo "                       "
echo "Let's look at the vmem:"
qstat -j $JOB_ID | grep vmem
echo "                       "

# Get the timestamp when the command completes:
end_timestamp=$(date "+%Y-%m-%d %H:%M:%S")

# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

# Print the end timestamp to stdout:
echo "                            "
echo "Job ended at: $end_timestamp"
echo "                            "

# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
